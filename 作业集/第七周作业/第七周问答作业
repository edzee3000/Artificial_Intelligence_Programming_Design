

1. 如何使用函数对功能进行抽象，有什么优势及可能存在的问题？
通过一个函数实现某一个功能，当在程序中需要使用该功能的时候，直接调用该函数即可，没有必要再对该功能的代码再写一遍
优势：节省代码量、修改的时候比较方便、提高开发效率、层级之间比较分明对于整体程序框架结构更明了
可能存在的问题：可能会产生副作用、函数不灵活对功能抽象的时候需要很多函数的复合相互调用导致程序更加复杂

2. 请对比C/C++以及python对函数嵌套的规定，并简述允许函数嵌套对程序设计的影响。
对比：①C++不允许在函数中定义函数，但是python允许，并且优先调用local-frame中定义的函数
②C++和python都允许在一个函数中调用另一个函数，并且在栈中创建一个新的相对独立的空间给这个新函数，使得函数之间会有层次感
③C++中可以通过函数指针进行传参，python是将函数名对象作为参数进行传递，相似之处在于可以使用传入进来的函数形参，使得函数使用更加灵活
影响：①允许函数嵌套使得程序设计更具有结构化
②函数嵌套使得程序员开发的时候将大量的时间可以放在逻辑设计上而不是写大量冗杂的代码
③使得程序设计更加灵活，不用总是ctrl-c、ctrl-v复制粘贴大量相似的代码，避免污染眼睛

3. 在Python中，Decorator是什么？请解释装饰器如何工作，以及如何使用它们来修改或增强已有函数的行为。
请编写一个用于性能检测的装饰器，可以输出被他装饰的函数的运行时间。
python装饰器是闭包的一种应用，用于拓展原来函数功能的一种函数，这个函数的特殊之处在于它的返回值也是一个函数，
使用python装饰器的好处就是在不用更改原函数的代码前提下给函数增加新的功能，使用时在需要装饰的函数前一行加上@装饰函数即可
编写一个用于性能检测的装饰器代码如下：





